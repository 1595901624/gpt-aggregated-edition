name: 'publish MP_preview'

on: 
  # push:
  #   tags:
  #     - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: get build number
        run: echo "BUILD_NUMBER=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}.Beta.Build.${process.env.BUILD_NUMBER}`,
              name: `v${process.env.PACKAGE_VERSION} Beta Build ${process.env.BUILD_NUMBER}`,
              body: '这是一个早期的测试版本，在使用过程中可能会出现一些不稳定的情况，建议您下载稳定版本使用。',
              draft: true,
              prerelease: true
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-20.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          # - build: linux
          #   os: ubuntu-20.04
          #   arch: aarch64
          #   target: aarch64-unknown-linux-gnu
          # - build: linux
          #   os: ubuntu-20.04
          #   arch: i686
          #   target: i686-unknown-linux-gnu
          - build: macos
            os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            bundle: 
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            bundle:
          - build: windows
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            bundle:
          - build: windows
            os: windows-latest
            arch: i686
            target: i686-pc-windows-msvc
            bundle:
          - build: windows
            os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
            bundle: --bundles nsis

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Install rust target
        run: rustup target add ${{ matrix.target }}
      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use
      - uses: 1595901624/tauri-action@win_aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target ${{ matrix.target }} ${{ matrix.bundle }}
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })